import { STATUS_MAP, PRIORIDADE_MAP } from './constants.js';


export const MAX_LENGTH = 50; // Limite de caracteres para a descriÃ§Ã£o na tabela


/**
Â * Formata uma data para o formato brasileiro
Â */
export function formatDate(dateString) {
Â  Â  if (!dateString) return 'N/A';
Â  Â  const date = new Date(dateString);
Â  Â  return date.toLocaleDateString('pt-BR');
}

/**
Â * Gera um badge colorido para o status do chamado
Â */
export function renderBadge(status) {
Â  Â  // ðŸš¨ CORREÃ‡ÃƒO: Adicionado fallback para status nulo/undefined
Â  Â  const lowerStatus = (status || '').toLowerCase();
Â  Â  const cls = STATUS_MAP[lowerStatus] || '';
Â  Â  return '<span class="badge ' + cls + '">' + (status || 'N/A') + '</span>';
}

/**
Â * Converte cÃ³digo de prioridade em texto legÃ­vel
Â */
export function getPrioridadeTexto(prioridade) {
Â  Â  // ðŸ’¡ SUGESTÃƒO: VocÃª importa PRIORIDADE_MAP, mas nÃ£o usa. 
Â  Â  // O ideal seria usar o Map importado.
Â  Â  const priorityMap = {
Â  Â  Â  Â  A: { text: 'Alta', class: 'danger' },
Â  Â  Â  Â  M: { text: 'MÃ©dia', class: 'warning' },
Â  Â  Â  Â  B: { text: 'Baixa', class: 'success' }
Â  Â  };
Â  Â  const p = priorityMap[prioridade] || { text: prioridade, class: 'secondary' };

Â  Â  return `<span class="badge ${p.class}">${p.text}</span>`;
}

/**
Â * Aplica a cor de destaque selecionada na interface
Â */
export function applyAccent(color) {
Â  Â  document.documentElement.style.setProperty('--primary', color);
Â  Â  const primaryElements = document.querySelectorAll('.btn:not(.ghost), .badge, .menu-item.active');
Â  Â  primaryElements.forEach(el => {
Â  Â  Â  Â  el.style.backgroundColor = color;
Â  Â  Â  Â  if (el.classList.contains('menu-item')) el.style.borderLeftColor = color;
Â  Â  });
}

/**
Â * Trunca a descriÃ§Ã£o do chamado e adiciona um botÃ£o para visualizaÃ§Ã£o completa.
Â * @param {string} descricao O texto completo da descriÃ§Ã£o.
Â * @param {number} chamadoId O ID do chamado.
Â * @returns {string} O HTML com a descriÃ§Ã£o truncada e o botÃ£o, ou a descriÃ§Ã£o completa.
Â */
export function renderDescricaoCurta(descricao, chamadoId) {
Â  Â  if (!descricao) {
Â  Â  Â  Â  return 'Nenhuma descriÃ§Ã£o.';
Â  Â  }

Â  Â  if (descricao.length > MAX_LENGTH) {
Â  Â  Â  Â  // Trunca o texto e adiciona o botÃ£o "+"
Â  Â  Â  Â  const textoCurto = descricao.substring(0, MAX_LENGTH) + '...';
Â  Â  Â  Â  
Â  Â  Â  Â  // Mantido o onclick original que funcionava para o layout
Â  Â  Â  Â  return `${textoCurto} <button class="btn-mini" onclick="mostrarDescricaoCompleta('${chamadoId}')" title="Ver descriÃ§Ã£o completa">+</button>`;
Â  Â  }

Â  Â  return descricao; // Retorna a descriÃ§Ã£o completa se for curta
}

export function mostrarDescricaoCompleta(chamadoId) {
Â  Â  // 1. Tenta encontrar a instÃ¢ncia correta (MeusChamadosView)
Â  Â  // A ordem aqui Ã© crÃ­tica: procuramos pela view especÃ­fica primeiro!
Â  Â  const activeView = window.meusChamadosView || window.chamadoManager; 
    
    // ðŸš¨ Esta ORDEM Ã© o que deve corrigir o bug do TÃ©cnico, 
    // mas precisamos ter certeza de que 'meusChamadosView' Ã© a Ãºnica ativa.
    
Â  Â  if (!activeView) {
Â  Â  Â  Â  alert("Erro: O gerenciador de chamados nÃ£o foi inicializado.");
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  // O array de dados: 'chamados' (em MeusChamadosView) ou 'chamadosData' (em ChamadoManager)
Â  Â  // Acessa o array da view ativa.
Â  Â  const dataArray = activeView.chamados || activeView.chamadosData; 
Â  Â  
Â  Â  if (!dataArray || dataArray.length === 0) {
Â  Â  Â  Â  alert("Dados do chamado nÃ£o carregados.");
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  // 2. Encontra o objeto do chamado pelo ID
Â  Â  // O '==' Ã© mantido pois Ã© como estava funcionando.
Â  Â  const chamado = dataArray.find(c => c.id_Cham == chamadoId); 
Â  Â  
Â  Â  if (chamado && chamado.descricao_Cham) {
Â  Â  Â  Â  alert(`DescriÃ§Ã£o Completa do Chamado #${chamadoId} (${chamado.titulo_Cham || ''}):\n\n${chamado.descricao_Cham}`);
Â  Â  } else {
Â  Â  Â  Â  alert("DescriÃ§Ã£o nÃ£o encontrada nos dados carregados.");
Â  Â  }
}

window.mostrarDescricaoCompleta = mostrarDescricaoCompleta;
window.renderDescricaoCurta = renderDescricaoCurta;