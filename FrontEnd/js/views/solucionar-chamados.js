/*
 * =================================================================
 * View: Solucionar Chamados (solucionar-chamados.js)
 * =================================================================
 * Esta view √© respons√°vel por exibir a lista de chamados para
 * t√©cnicos (N√≠vel 2) e administradores (N√≠vel 3).
 *
 * Utiliza a BaseListView para gerenciar pagina√ß√£o e estado de filtro.
 * =================================================================
 */

// --- Importa√ß√µes ---
import { apiGetChamados, apiGetChamadosTecnico, apiUpdateChamado } from '../api/chamados.js';
import { renderBadge, getPrioridadeTexto, formatDate, renderDescricaoCurta } from '../utils/helpers.js';
import { iniciarSolucao } from './solucionar-chamado-detalhe.js';
import { store } from '../store.js';
import { BaseListView } from '../utils/base-list-view.js'; // Classe base para pagina√ß√£o/filtros

// --- Constantes da View ---
const NIVEL_ADMIN = 3;
const NIVEL_TECNICO = 2;
const STATUS_EM_ANDAMENTO = 'Em andamento';
const DEFAULT_PAGE_SIZE = 5; // Itens por p√°gina

/**
 * Classe principal para gerenciar a tela "Solucionar Chamados".
 * Herda de BaseListView para reutilizar a l√≥gica de pagina√ß√£o e
 * estado de filtro (currentPage, pageSize, filtroStatus, termoBusca).
 */
class ChamadoManager extends BaseListView {
    
    /**
     * Prepara a classe, definindo o estado inicial e pegando dados do usu√°rio logado.
     */
    constructor() {
        // Inicializa a classe base com o tamanho de p√°gina padr√£o
        super(DEFAULT_PAGE_SIZE); 
        
        // Armazena os dados brutos da API para a p√°gina atual
        this.chamadosData = [];
        
        // Refer√™ncias do DOM que ser√£o preenchidas no 'assignDOMelements'
        this.tbody = null;
        this.loadingIndicator = null;
        this.filtroStatusEl = null;
        this.buscaInputEl = null;
        
        // Contexto do usu√°rio (do 'store' global)
        this.usuarioLogadoId = store.usuarioLogado?.id || null;
        this.nivelAcesso = store.usuarioLogado?.nivel_acesso || 0;
    }

    // =================================================================
    // --- 1. M√©todos de Inicializa√ß√£o ---
    // =================================================================

    /**
     * Ponto de entrada principal da classe.
     * Verifica permiss√µes, renderiza o HTML base e carrega os dados.
     */
    async init() {
        // Guarda de Rota: Somente N√≠vel 2 (T√©cnico) ou superior pode acessar esta tela.
        if (!this.usuarioLogadoId || this.nivelAcesso < NIVEL_TECNICO) {
            document.getElementById('view').innerHTML = '<div class="card">Acesso n√£o autorizado.</div>';
            return;
        }

        this.renderBaseHTML();
        this.assignDOMelements();
        this.setupEvents();
        
        // 'loadData' √© o m√©todo da *nossa* classe (ChamadoManager)
        // que √© chamado pela classe base (BaseListView)
        await this.loadData(); 
    }

    /**
     * Atribui refer√™ncias aos elementos do DOM para uso interno.
     * @private
     */
    assignDOMelements() {
        this.tbody = document.getElementById('tbody');
        this.loadingIndicator = document.getElementById('loadingChamados');
        this.filtroStatusEl = document.getElementById('filtroStatus');
        this.buscaInputEl = document.getElementById('busca');
    }

    // =================================================================
    // --- 2. M√©todos de Renderiza√ß√£o da UI ---
    // =================================================================

    /**
     * Renderiza o "shell" est√°tico da view (toolbar, tabela vazia, etc.).
     * @private
     */
    renderBaseHTML() {
        const view = document.getElementById('view');
        view.innerHTML = `
            <div class="toolbar">
                <select id="filtroStatus" class="select" style="max-width:220px">
                    <option value="">Todos os status</option>
                    <option>Aberto</option>
                    <option>Em andamento</option>
                    <option>Fechado</option>
                </select>
                <input id="busca" class="input" placeholder="Buscar por descri√ß√£o..." style="max-width:320px"/>
                <button id="refreshChamados" class="btn">üîÑ Atualizar</button>
            </div>
            <div class="loading" id="loadingChamados">Carregando chamados...</div>
            <table class="table">
                <thead>
                    <tr>
                        <th>ID Chamado</th>
                        <th>Respons√°vel</th>
                        <th>Descri√ß√£o</th>
                        <th>Status</th>
                        <th>Prioridade</th>
                        <th>Categoria</th>
                        <th>Data Abertura</th>
                        <th>A√ß√µes</th>
                    </tr>
                </thead>
                <tbody id="tbody"></tbody>
            </table>
            <div id="paginationContainer" style="margin-top: 15px; text-align: center;"></div>
        `;
    }

    /**
     * Renderiza as linhas (<tr>) da tabela com base nos dados fornecidos.
     * @param {Array<Object>} chamados - Lista de chamados para exibir.
     * @private
     */
    renderChamadosTable(chamados) {
        if (!this.tbody) return;

        if (chamados.length === 0) {
            this.tbody.innerHTML = '<tr><td colspan="8" style="text-align: center;">Nenhum chamado encontrado.</td></tr>';
            return;
        }

        const rows = chamados.map(c => {
            // L√≥gica de UI complexa √© movida para uma fun√ß√£o helper
            const actionButton = this.getActionButton(c);
            
            const nomeTecnico = c.tecNome 
                ? `${c.tecNome} ${c.tecSobrenome}` 
                : (c.tecResponsavel_Cham ? `ID: ${c.tecResponsavel_Cham}` : 'Sem t√©cnico');
            
            return `
                <tr>
                    <td>${c.id_Cham}</td>
                    <td>${nomeTecnico}</td>
                    <td>${renderDescricaoCurta(c.descricao_Cham, c.id_Cham) || 'Sem descri√ß√£o'}</td>
                    <td>${renderBadge(c.status_Cham)}</td>
                    <td>${getPrioridadeTexto(c.prioridade_Cham)}</td>
                    <td>${c.categoria_Cham || 'N√£o definida'}</td>
                    <td>${formatDate(c.dataAbertura_Cham)}</td>
                    <td>
                        ${actionButton}
                        </td>
                </tr>
            `;
        }).join('');
        
        this.tbody.innerHTML = rows;
    }

    /**
     * Helper que cont√©m a l√≥gica de neg√≥cios para decidir qual bot√£o
     * de a√ß√£o exibir para o t√©cnico/admin.
     * @param {Object} c - O objeto chamado.
     * @returns {string} O HTML do bot√£o.
     * @private
     */
    getActionButton(c) {
        const isAssignedToMe = c.tecResponsavel_Cham === this.usuarioLogadoId;
        const isInProgress = c.status_Cham === STATUS_EM_ANDAMENTO;
        const isClosed = c.status_Cham === 'Fechado';
        const isAuthor = c.clienteId_Cham === this.usuarioLogadoId;

        // 1. Chamado fechado
        if (isClosed) {
            // 'detalharChamadoIA' √© uma fun√ß√£o global exposta pelo main.js
            return `<button class="btn secondary" onclick="detalharChamadoIA(${c.id_Cham})">Fechado</button>`;
        }

        // 2. Chamado "Em Andamento"
        if (isInProgress) {
            if (isAssignedToMe) {
                // Est√° comigo, posso continuar a solu√ß√£o
                return `<button class="btn btn-third" data-action="continue" data-id="${c.id_Cham}">Continuar Solucionando</button>`;
            } 
            
            if (!c.tecResponsavel_Cham) {
                // Regra de neg√≥cio: Se o usu√°rio logado for o autor, ele n√£o pode "pegar" o pr√≥prio chamado.
                if (isAuthor) {
                    return '<button class="btn btn-secondary" disabled>Voc√™ √© o Autor</button>';
                }
                // Est√° "Em Andamento" mas livre (ex: fila da IA), pode pegar.
                return `<button class="btn btn-primary" data-action="take" data-id="${c.id_Cham}">üõ†Ô∏è Solucionar Chamado</button>`;
            }
            
            // Est√° em andamento E com outro t√©cnico
            return '<button class="btn btn-secondary" disabled>Em Andamento (Atribu√≠do)</button>';
        }
        
        // 3. Chamado "Aberto"
        // (Status "Aberto" significa que ainda est√° com o cliente ou IA, antes de ir para a fila "Em Andamento")
        if (c.status_Cham === 'Aberto') {
            return '<button class="btn btn-secondary" disabled>Aguardando IA/Cliente</button>';
        }

        // Fallback
        return '';
    }

    // =================================================================
    // --- 3. M√©todos de Gerenciamento de Dados ---
    // =================================================================

    /**
     * Carrega os dados da API com base no n√≠vel de acesso e nos filtros
     * atuais (armazenados na classe base).
     * Este m√©todo √© chamado por 'init' e pela pagina√ß√£o (BaseListView).
     */
    async loadData() {
        if (this.loadingIndicator) {
            this.loadingIndicator.style.display = 'block';
            this.loadingIndicator.textContent = 'Carregando chamados...';
        }
        
        try {
            const apiParams = [this.currentPage, this.pageSize, this.termoBusca, this.filtroStatus];
            let response;

            // Decide qual endpoint da API chamar com base no n√≠vel de acesso
            if (this.nivelAcesso === NIVEL_ADMIN) {
                // Admin v√™ TODOS os chamados
                response = await apiGetChamados(...apiParams);
            } else {
                // T√©cnico v√™ apenas os chamados da fila "Em Andamento"
                response = await apiGetChamadosTecnico(...apiParams);
            }

            // A API deve retornar { chamados: [...], totalCount: N }
            this.chamadosData = response.chamados;
            this.totalCount = response.totalCount; // Informa √† BaseListView o total de itens

            this.drawChamados(); // Renderiza os dados recebidos
            this.renderPagination(); // Renderiza os controles de pagina√ß√£o (m√©todo da BaseListView)

        } catch (error) {
            console.error('Erro ao carregar chamados:', error);
            if (this.loadingIndicator) {
                this.loadingIndicator.textContent = 'Erro ao carregar chamados. Tente novamente.';
            }
        } finally {
            if (this.loadingIndicator) {
                this.loadingIndicator.style.display = 'none';
            }
        }
    }

    /**
     * Renderiza os dados na tabela.
     * Esta fun√ß√£o √© chamada ap√≥s 'loadData' buscar os dados.
     * A filtragem j√° foi feita pelo back-end.
     */
    drawChamados() {
        // A filtragem foi removida daqui, pois 'this.chamadosData' j√°
        // cont√©m os dados corretos (filtrados e paginados) vindos da API.
        this.renderChamadosTable(this.chamadosData);
    }

    // =================================================================
    // --- 4. M√©todos de Gerenciamento de Eventos ---
    // =================================================================

    /**
     * Configura todos os listeners de eventos para a view.
     * @private
     */
    setupEvents() {
        // O 'triggerLoad(true)' √© um m√©todo da BaseListView.
        // O 'true' indica que a pagina√ß√£o deve ser resetada para a p√°gina 1.
        
        document.getElementById('refreshChamados').addEventListener('click', () => {
            this.triggerLoad(false); // 'false' = recarrega a p√°gina atual
        });

        this.filtroStatusEl.addEventListener('change', (e) => {
            this.filtroStatus = e.target.value; // Atualiza o estado na BaseListView
            this.triggerLoad(true); // Reseta para a p√°gina 1
        });

        this.buscaInputEl.addEventListener('input', (e) => {
            this.termoBusca = e.target.value; // Atualiza o estado na BaseListView
            this.triggerLoad(true); // Reseta para a p√°gina 1
        });
        
        // Delega√ß√£o de eventos: Um √∫nico listener no <tbody>
        // para gerenciar cliques em todos os bot√µes de a√ß√£o.
        this.tbody.addEventListener('click', (e) => this.handleChamadoActions(e));
    }

    /**
     * Manipulador central para todos os cliques nos bot√µes de a√ß√£o da tabela.
     * @param {Event} e - O objeto de evento do clique.
     * @private
     */
    async handleChamadoActions(e) {
        // Encontra o bot√£o mais pr√≥ximo que foi clicado
        const btn = e.target.closest('button');
        if (!btn) return; // O clique n√£o foi em um bot√£o

        const id = +btn.dataset.id; // Converte o ID para n√∫mero
        const action = btn.dataset.action;

        if (!action || !id) return; // Bot√£o sem a√ß√£o ou ID (ex: "Fechado", "Aguardando")

        try {
            if (action === 'take') {
                // A√ß√£o: Pegar um chamado da fila
                const updatePayload = {
                    status_Cham: STATUS_EM_ANDAMENTO, // Define o status
                    tecResponsavel_Cham: this.usuarioLogadoId // Atribui a si mesmo
                };

                await apiUpdateChamado(id, updatePayload);
                alert(`Chamado ${id} atribu√≠do a voc√™!`);
                iniciarSolucao(id); // Navega para a tela de detalhes da solu√ß√£o
                return; // Encerra a execu√ß√£o aqui
            }
            
            if (action === 'continue') {
                // A√ß√£o: Continuar um chamado que j√° √© seu
                iniciarSolucao(id); // Apenas navega para a tela de solu√ß√£o
                return; // Encerra
            }

            // (Opcional: A√ß√£o 'close' foi removida, mas poderia ser tratada aqui)
            // if (action === 'close') { ... }
            
            // Recarrega os dados da lista se uma a√ß√£o (que n√£o seja navega√ß√£o) for conclu√≠da
            await this.loadData();

        } catch (error) {
            alert('Erro ao atualizar chamado: ' + error.message);
            console.error('Erro ao atualizar chamado:', error);
        }
    }
}


/**
 * Fun√ß√£o de exporta√ß√£o p√∫blica.
 * Cria a inst√¢ncia da classe e a inicia.
 * √â chamada pelo roteador (main.js).
 */
export async function renderTodosChamados() {
    // Exp√µe a inst√¢ncia ao 'window' para depura√ß√£o f√°cil, se necess√°rio
    window.chamadoManager = new ChamadoManager();
    await window.chamadoManager.init();
}