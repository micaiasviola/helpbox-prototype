// services/iaService.js

// Importe o SDK
const { GoogleGenAI } = require('@google/genai');

// ðŸš¨ Inicialize o cliente Gemini (Ele buscarÃ¡ a chave da variÃ¡vel de ambiente GEMINI_API_KEY)
// Se vocÃª estÃ¡ usando uma variÃ¡vel diferente, ajuste o construtor.
const ai = new GoogleGenAI({});

/**
 * Gera uma resposta de IA REAL usando a API Gemini.
 * * @param {string} categoria A categoria do chamado.
 * @param {string} descricao A descriÃ§Ã£o completa do problema.
 * @returns {Promise<string>} O texto da soluÃ§Ã£o sugerida pelo Gemini.
 */
async function gerarRespostaIA(categoria, descricao, titulo) {
    if (!descricao || descricao.length < 10) {
        return "Desculpe, a descriÃ§Ã£o Ã© muito curta. Por favor, forneÃ§a mais detalhes para que a IA possa analisar seu problema.";
    }

    const prompt = `
        VocÃª Ã© um Assistente de Suporte TÃ©cnico de primeira linha, focado em **soluÃ§Ãµes imediatas e fÃ¡ceis**.
        Sua funÃ§Ã£o Ã© analisar o chamado e fornecer uma resposta profissional, **direta e formatada usando Markdown (listas e negrito)**.
        A resposta deve focar nos **3 passos mais simples e eficazes** de autoatendimento para o problema.
        
        **InstruÃ§Ã£o de FormataÃ§Ã£o:** Use tÃ­tulos em negrito (\`**TÃ­tulo**\`) e listas numeradas ou com marcadores. Seja breve.
        
        ---
        **Detalhes do Chamado:**
        - TÃ­tulo: ${titulo} 
        - Categoria: ${categoria}
        - DescriÃ§Ã£o do Problema: ${descricao}
        ---

        ForneÃ§a APENAS a soluÃ§Ã£o e os passos de autoatendimento.
    `;

    const FALLBACK_MESSAGE = "A anÃ¡lise automÃ¡tica falhou. Por favor, encaminhe para a nossa equipe tecnica.";
    const MAX_RETRIES = 3;
    let currentDelay = 1000; // 1 segundo de atraso inicial

    for (let i = 0; i < MAX_RETRIES; i++) {
        try {
            // Tenta chamar a API
            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: prompt,
                config: { temperature: 0.1 }
            });

            // Se for bem-sucedido, retorna o resultado
            return response.text.trim();

        } catch (error) {
            if (error.status === 503 && i < MAX_RETRIES - 1) {
                // Se for erro 503 e ainda houver tentativas, espera e tenta novamente
                console.warn(`Tentativa ${i + 1} falhou com 503. Tentando novamente em ${currentDelay / 1000}s...`);
                await new Promise(resolve => setTimeout(resolve, currentDelay));
                currentDelay *= 2; // Dobra o atraso (Exponential Backoff)
            } else {
                console.error(`Erro fatal na IA (Status: ${error.status || 'Rede'}). Retornando fallback.`, error);
Â  Â  Â  Â  Â  Â  Â  Â  return FALLBACK_MESSAGE;
            }
        }
    }
    return FALLBACK_MESSAGE;
}

module.exports = {
    gerarRespostaIA
};